# Create a dendrogram object from the hclust variable
dend_oes <- as.dendrogram(hc_oes)
# Plot the dendrogram
plot(dend_oes)
# Color branches by cluster formed from the cut at a height of 100000
dend_colored <- color_branches(dend_oes, h = 100000)
# Plot the colored dendrogram
plot(dend_colored)
# Calculate Euclidean distance between the occupations
dist_oes <- dist(oes, method = 'euclidean')
hc_oes <- hclust(dist_oes, method = 'average')
# Create a dendrogram object from the hclust variable
dend_oes <- as.dendrogram(hc_oes)
# Plot the dendrogram
plot(dend_oes)
# Color branches by cluster formed from the cut at a height of 100000
dend_colored <- color_branches(dend_oes, h = 100000)
# Plot the colored dendrogram
plot(dend_colored)
dist_oes <- dist(oes, method = 'euclidean')
hc_oes <- hclust(dist_oes, method = 'average')
library(tibble)
library(tidyr)
# Use rownames_to_column to move the rownames into a column of the data frame
df_oes <- rownames_to_column(as.data.frame(oes), var = 'occupation')
# Create a cluster assignment vector at h = 100,000
cut_oes <- cutree(hc_oes, h = 100000)
# Generate the segmented the oes data frame
clust_oes <- mutate(df_oes, cluster = cut_oes)
# Create a tidy data frame by gathering the year and values into two columns
gathered_oes <- gather(data = clust_oes,
key = year,
value = mean_salary,
-occupation, -cluster)
df_oes
head(df_oes)
cut_oes
clust_oes
# View the clustering assignments by sorting the cluster assignment vector
sort(cut_oes)
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation))
# Use rownames_to_column to move the rownames into a column of the data frame
df_oes <- rownames_to_column(as.data.frame(oes), var = 'occupation')
# Create a cluster assignment vector at h = 100,000
cut_oes <- cutree(hc_oes, h = 100000)
# Generate the segmented the oes data frame
clust_oes <- mutate(df_oes, cluster = cut_oes)
# Create a tidy data frame by gathering the year and values into two columns
gathered_oes <- gather(data = clust_oes,
key = year,
value = mean_salary,
-occupation, -cluster)
# View the clustering assignments by sorting the cluster assignment vector
sort(cut_oes)
# Plot the dendrogram
plot(dend_oes)
# Plot the colored dendrogram
plot(dend_colored)
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation))
# Use map_dbl to run many models with varying value of k
sil_width <- map_dbl(2:10,  function(k){
model <- pam(oes, k = k)
model$silinfo$avg.width
})
# Generate a data frame containing both k and sil_width
sil_df <- data.frame(
k = 2:10,
sil_width = sil_width
)
# Plot the relationship between k and sil_width
ggplot(sil_df, aes(x = k, y = sil_width)) +
geom_line() +
scale_x_continuous(breaks = 2:10)
# Use map_dbl to run many models with varying value of k (centers)
tot_withinss <- map_dbl(1:10,  function(k){
model <- kmeans(x = oes, centers = k)
model$tot.withinss
})
# Generate a data frame containing both k and tot_withinss
elbow_df <- data.frame(
k = 1:10,
tot_withinss = tot_withinss
)
# Plot the elbow plot
ggplot(elbow_df, aes(x = k, y = tot_withinss)) +
geom_line() +
scale_x_continuous(breaks = 1:10)
# Plot the relationship between k and sil_width
ggplot(sil_df, aes(x = k, y = sil_width)) +
geom_line() +
scale_x_continuous(breaks = 2:10)
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation))
cut_oes <- cutree(hc_oes, k = 2)
gathered_oes <- gather(data = clust_oes,
key = year,
value = mean_salary,
-occupation, -cluster)
# View the clustering assignments by sorting the cluster assignment vector
sort(cut_oes)
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation))
cut_oes <- cutree(hc_oes, k = 2)
gathered_oes <- gather(data = clust_oes,
key = year,
value = mean_salary,
-occupation, -cluster)
clust_oes <- mutate(df_oes, cluster = cut_oes)
# View the clustering assignments by sorting the cluster assignment vector
sort(cut_oes)
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation))
cut_oes <- cutree(hc_oes, k = 2)
clust_oes <- mutate(df_oes, cluster = cut_oes)
gathered_oes <- gather(data = clust_oes,
key = year,
value = mean_salary,
-occupation, -cluster)
# View the clustering assignments by sorting the cluster assignment vector
sort(cut_oes)
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation))
cut_oes <- cutree(hc_oes, k = 7)
clust_oes <- mutate(df_oes, cluster = cut_oes)
gathered_oes <- gather(data = clust_oes,
key = year,
value = mean_salary,
-occupation, -cluster)
# View the clustering assignments by sorting the cluster assignment vector
sort(cut_oes)
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation))
# View the clustering assignments by sorting the cluster assignment vector
sort(cut_oes)
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation))
# View the clustering assignments by sorting the cluster assignment vector
sort(cut_oes)
import_stock_xts <- function(stock, src = 'yahoo') {
df <- getSymbols(stock, src = src, env = NULL)
names(df) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
df <- apply.monthly(df, mean)
return(df)
}
import_stock_df <- function(stock, src = 'yahoo') {
df <- getSymbols(stock, src = src, env = NULL)
names(df) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
df <- as.data.frame(df)
df <- cbind(Date = rownames(df), df)
rownames(df) <- 1:nrow(df)
df$Date <- as.Date(df$Date, "%Y-%m-%d")
df <- as.tibble(df)
return(df)
}
nintendo <- import_stock_df("APPL")
library(quantmod)
library(dplyr)
library(ggplot2)
library(xts)
nintendo <- import_stock_df("APPL")
nintendo <- import_stock_df("APPL")
nintendo <- import_stock_df("NTDOY")
nintendo_xts <- import_stock_xts("NTDOY")
highchart(type = 'stock') %>% hc_add_series(nintendo_xts)
library(highcarter)
library(Highcarter)
library(Highcharter)
library(highcharter)
highchart(type = 'stock') %>% hc_add_series(nintendo_xts)
import_stock_xts <- function(stock, src = 'yahoo') {
df <- getSymbols(stock, src = src, env = NULL)
names(df) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
return(df)
}
import_stock_df <- function(stock, src = 'yahoo') {
df <- getSymbols(stock, src = src, env = NULL)
names(df) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
df <- as.data.frame(df)
df <- cbind(Date = rownames(df), df)
rownames(df) <- 1:nrow(df)
df$Date <- as.Date(df$Date, "%Y-%m-%d")
df <- as.tibble(df)
return(df)
}
aapl_xts <- import_stock_xts("AAPL")
aapl <- import_stock_df("AAPL")
# Use the base function and set the correct chart type
highchart(type = 'stock') %>%
# Add the price data
hc_add_series(aapl_xts)
# Create a line chart of the open prices
hchart(aapl,
# Specify the mappings and set the correct type
hcaes(x = Date, y = Open),
type = "line")
highchart(type = "stock") %>%
hc_title(text = "Trends of Three Stocks") %>%
hc_subtitle(text = "Daily Prices") %>%
# Add JPM as a blue line called JP Morgan
hc_add_series(stock_prices_xts$JPM, color = "blue", name = "JP Morgan") %>%
# Add KO as a red line called Coke
hc_add_series(stock_prices_xts$KO, color = "red", name = "Coke") %>%
# Add DIS as a purple line named Disney
hc_add_series(stock_prices_xts$DIS, color = "purple", name = "Disney") %>%
hc_yAxis(title = list(text = "Price (USD)"),
labels = list(format = "${value}"),
opposite = FALSE) %>%
hc_tooltip(pointFormat =
"{point.series.name}:
$ {point.y: .2f}") %>%
hc_legend(enabled = TRUE)
setwd("~/Documents/GitHub/Useful_R_Code_Library/Highcharter")
# Import the data
stock_wide_tibble_prices <- read_csv("stock_prices_xts.csv")
stock_tidy_tibble_prices <- read_csv("stock_prices.csv")
stock_tidy_tibble_returns <- read_csv("stock_returns.csv")
head(stock_tidy_tibble_prices)
head(stock_prices_xts)
stock_wide_tibble_prices
?write.csv
# Import the data
stock_wide_tibble_prices %>% select(-X1)
# Import the data
write_csv(stock_wide_tibble_prices %>% select(-X1), "stock_prices_xts.csv")
stock_wide_tibble_prices <- read_csv("stock_prices_xts.csv")
# Import the data
write_csv(stock_tidy_tibble_prices %>% select(-X1), "stock_prices_xts.csv")
# Import the data
write_csv(stock_wide_tibble_prices %>% select(-X1), "stock_prices_xts.csv")
# Import the data
write_csv(stock_tidy_tibble_prices %>% select(-X1), "stock_prices.csv")
# Import the data
write_csv(stock_tidy_tibble_returns %>% select(-X1), "stock_returns.csv")
load("/Users/jackie_kim94/Downloads/Stocks/stock_prices_xts.RData")
head(stock_prices_xts)
colnames(stock_prices_xts)
# Import the data
write_csv(stock_prices_xts, "stock_prices_xts.csv")
# Import the data
write_csv(as.data.frame(stock_prices_xts), "stock_prices_xts.csv")
stock_wide_tibble_prices <- read_csv("stock_prices_xts.csv")
hchart(stock_wide_tibble_prices, hcaes(x = Date, y = DIS),
type = "line",
name = "DIS",
color = "orange",
showInLegend = TRUE) %>%
hc_add_series(stock_wide_tibble_prices,
hcaes(x = Date, y = KO),
type = 'line',
color = "green",
name = "KO",
showInLegend = TRUE) %>%
hc_add_series(stock_wide_tibble_prices,
hcaes(x = Date, y = JPM),
type = 'line',
color = "black",
name = "JPM",
showInLegend = TRUE) %>%
hc_tooltip(shared = TRUE,
pointFormat = "{point.series.name}: ${point.y: .2f}<br>") %>%
hc_yAxis(title = list(text = "prices (USD)"),
labels = list(format = "${value}")) %>%
hc_legend(enabled = TRUE)
stock_wide_tibble_prices <- read_csv("stock_prices_xts.csv")
stock_tidy_tibble_prices <- read_csv("stock_prices.csv")
stock_tidy_tibble_returns <- read_csv("stock_returns.csv")
# Visualize Multiple Stocks as line charts
# Converting from xts data object to tibble object
stock_wide_tibble_prices <- as.data.frame(stock_prices_xts)
stock_wide_tibble_prices <- cbind(Date = rownames(stock_wide_tibble_prices), stock_wide_tibble_prices)
rownames(stock_wide_tibble_prices) <- 1:nrow(stock_wide_tibble_prices)
stock_wide_tibble_prices$Date <- as.Date(stock_wide_tibble_prices$Date, "%Y-%m-%d")
stock_wide_tibble_prices <- as.tibble(stock_wide_tibble_prices)
# Import the data
stock_wide_tibble_prices <- read_csv("stock_prices_xts.csv")
# Import the data
stock_wide_tibble_prices <- as.data.frame(read_csv("stock_prices_xts.csv"))
class(stock_wide_tibble_prices)
# Import the data
stock_prices_xts <- read_csv('stock_prices_xts.csv')
highchart(type = "stock") %>%
hc_title(text = "Trends of Three Stocks") %>%
hc_subtitle(text = "Daily Prices") %>%
# Add JPM as a blue line called JP Morgan
hc_add_series(stock_prices_xts$JPM, color = "blue", name = "JP Morgan") %>%
# Add KO as a red line called Coke
hc_add_series(stock_prices_xts$KO, color = "red", name = "Coke") %>%
# Add DIS as a purple line named Disney
hc_add_series(stock_prices_xts$DIS, color = "purple", name = "Disney") %>%
hc_yAxis(title = list(text = "Price (USD)"),
labels = list(format = "${value}"),
opposite = FALSE) %>%
hc_tooltip(pointFormat =
"{point.series.name}:
$ {point.y: .2f}") %>%
hc_legend(enabled = TRUE)
hchart(stock_wide_tibble_prices, hcaes(x = Date, y = DIS),
type = "line",
name = "DIS",
color = "orange",
showInLegend = TRUE) %>%
hc_add_series(stock_wide_tibble_prices,
hcaes(x = Date, y = KO),
type = 'line',
color = "green",
name = "KO",
showInLegend = TRUE) %>%
hc_add_series(stock_wide_tibble_prices,
hcaes(x = Date, y = JPM),
type = 'line',
color = "black",
name = "JPM",
showInLegend = TRUE) %>%
hc_tooltip(shared = TRUE,
pointFormat = "{point.series.name}: ${point.y: .2f}<br>") %>%
hc_yAxis(title = list(text = "prices (USD)"),
labels = list(format = "${value}")) %>%
hc_legend(enabled = TRUE)
stock_wide_tibble_prices <- as.data.frame(stock_prices_xts)
stock_wide_tibble_prices <- cbind(Date = rownames(stock_wide_tibble_prices), stock_wide_tibble_prices)
rownames(stock_wide_tibble_prices) <- 1:nrow(stock_wide_tibble_prices)
stock_wide_tibble_prices$Date <- as.Date(stock_wide_tibble_prices$Date, "%Y-%m-%d")
stock_wide_tibble_prices <- as.tibble(stock_wide_tibble_prices)
hchart(stock_wide_tibble_prices, hcaes(x = Date, y = DIS),
type = "line",
name = "DIS",
color = "orange",
showInLegend = TRUE) %>%
hc_add_series(stock_wide_tibble_prices,
hcaes(x = Date, y = KO),
type = 'line',
color = "green",
name = "KO",
showInLegend = TRUE) %>%
hc_add_series(stock_wide_tibble_prices,
hcaes(x = Date, y = JPM),
type = 'line',
color = "black",
name = "JPM",
showInLegend = TRUE) %>%
hc_tooltip(shared = TRUE,
pointFormat = "{point.series.name}: ${point.y: .2f}<br>") %>%
hc_yAxis(title = list(text = "prices (USD)"),
labels = list(format = "${value}")) %>%
hc_legend(enabled = TRUE)
stock_wide_tibble_prices
# Visualize Multiple Stocks as line charts
# Converting from xts data object to tibble object
stock_wide_tibble_prices <- as.data.frame(stock_prices_xts)
stock_wide_tibble_prices
stock_prcies_xts
head(stock_prices_xts)
load("/Users/jackie_kim94/Downloads/Stocks/stock_prices_xts.RData")
head(stock_prices_xts)
class(stock_prices_xts)
write.zoo(stock_prices_xts, "stock_prices_xts.zoo")
read.csv.zoo("stock_prices_xts.zoo")
read.zoo("stock_prices_xts.zoo")
write.zoo(stock_prices_xts, "stock_prices_xts.zoo", index.name = "Date")
?read.delim.zoo
write.zoo(stock_prices_xts, "stock_prices_xts", index.name = "Date")
?read.zoo
read.zoo("stock_prices_xts")
read.csv("stock_prices_xts")
head(read.csv("stock_prices_xts"))
head(read.csv("stock_prices_xts", sep = " "))
class(head(read.csv("stock_prices_xts", sep = " ")))
as.xts(read.csv("stock_prices_xts", sep = " "))
class(stock_prices_xts$AMZN)
?as.xts
# Import the data
read.RDS("stock_prices_xts.RData")
# Import the data
read_rds("stock_prices_xts.RData")
# Import the data
readRDS("stock_prices_xts.RData")
# Import the data
x <- readRDS("stock_prices_xts.RData")
# Import the data
load.Rdata("stock_prices_xts.RData")
?load.Rdata
install.packages("miceadds")
# Import the data
load.Rdata("stock_prices_xts.RData")
# install.packages("miceadds")
library(miceadds)
# Import the data
load.Rdata("stock_prices_xts.RData")
# Import the data
detach(miceadds)
detach("package:miceadds", unload=TRUE)
stock_wide_tibble_prices <- as.data.frame(stock_prices_xts)
highchart(type = "stock") %>%
hc_title(text = "Trends of Three Stocks") %>%
hc_subtitle(text = "Daily Prices") %>%
# Add JPM as a blue line called JP Morgan
hc_add_series(stock_prices_xts$JPM, color = "blue", name = "JP Morgan") %>%
# Add KO as a red line called Coke
hc_add_series(stock_prices_xts$KO, color = "red", name = "Coke") %>%
# Add DIS as a purple line named Disney
hc_add_series(stock_prices_xts$DIS, color = "purple", name = "Disney") %>%
hc_yAxis(title = list(text = "Price (USD)"),
labels = list(format = "${value}"),
opposite = FALSE) %>%
hc_tooltip(pointFormat =
"{point.series.name}:
$ {point.y: .2f}") %>%
hc_legend(enabled = TRUE)
hchart(stock_wide_tibble_returns,
hcaes(x = KO, y = AMZN),
type =  "scatter",
# Color the points pink
color = "pink",
name = "GOOG v. AMZN") %>%
# Add a custom tooltip
hc_tooltip(pointFormat = "{point.date} <br>
AMZN: {point.y: .2f}% <br>
KO: {point.x: .2f}%")
stock_wide_tibble_prices <- as.data.frame(stock_prices_xts)
stock_tidy_tibble_prices <- read_csv("stock_prices.csv")
stock_tidy_tibble_returns <- read_csv("stock_returns.csv")
stock_tidy_tibble_returns
hchart(stock_wide_tibble_returns,
hcaes(x = KO, y = AMZN),
type =  "scatter",
# Color the points pink
color = "pink",
name = "GOOG v. AMZN") %>%
# Add a custom tooltip
hc_tooltip(pointFormat = "{point.date} <br>
AMZN: {point.y: .2f}% <br>
KO: {point.x: .2f}%")
head(stock_wide_tibble_prices)
head(stock_tidy_tibble_returns)
head(stock_wide_tibble_prices)
stock_wide_tibble_prices <- read_csv("stock_prices.csv")
stock_wide_tibble_returns <- read_csv("stock_returns.csv")
hchart(stock_wide_tibble_returns,
hcaes(x = AMZN, y = DIS),
type =  "scatter") %>%
hc_add_series(stock_wide_tibble_returns,
hcaes(x = AMZN, y = (AMZN * .492)),
type =  "line",
# Add the tooltip argument
tooltip = list(
# Change the header of the line tooltip
headerFormat = "DIS/AMZN linear relationship<br>",
# Customize the y value display
pointFormat = "{point.y: .2f}%")) %>%
# Customize the scatter tooltip
hc_tooltip(pointFormat = "{point.date} <br> DIS: {point.y}% <br> AMZN: {point.x}%")
stock_tidy_tibble_returns <- stock_wide_tibble_returns %>% gather("symbol", "returns", -date)
stock_tidy_tibble_returns <- stock_tidy_tibble_returns[!is.na(stock_tidy_tibble_returns$returns),]
stock_tidy_tibble_returns %>%
group_by(symbol) %>%
# Calculate the standard deviation and mean of returns
summarize(std_dev = sd(returns),
mean = mean(returns)) %>%
hchart(.,
hcaes(x = symbol,
# Make the height of each point the standard deviation
y = std_dev,
# Color each point by symbol
color = symbol,
# Make the size of each point the mean return
size = mean,
group = symbol),
type = "scatter") %>%
hc_title(text = "Standard Dev and Mean Return")
stock_tidy_tibble_returns %>%
group_by(symbol) %>%
summarize(avg_returns = mean(returns),
risk = sd(returns),
risk_return = risk/avg_returns) %>%
# Pass the summary statistics to hchart
hchart(.,
# Map the stocks and the risk/return ratio
hcaes(x = symbol,
y = risk_return,
group = symbol,
# Color by symbol
color = symbol),
# Create a column plot
type = "column") %>%
hc_title(text = "Risk/Return") %>%
hc_subtitle(text = "lower bars are better")
# Calculate the mean, sd, max and min returns
stock_tidy_tibble_returns %>%
group_by(symbol) %>%
summarize(mean = mean(returns),
st_dev = sd(returns),
max_return = max(returns),
min_return = min(returns)) %>%
# Pass the summarized to data to hchart()
hchart(.,
# Map the data to the axes and group
hcaes(x = symbol, y = st_dev, group = symbol),
type = "column") %>%
# Customize the tooltip to show mean, max and minimum daily returns
hc_tooltip(pointFormat = "mean: {point.mean: .4f}% <br>
max: {point.max_return: .4f}% <br>
min: {point.min_return: .4f}%")
